---
- name: Create application group
  group:
    name: "{{oval_group}}"
    gid: "{{oval_gid}}"

- name: Create application account
  user: 
    name: "{{oval_user}}"
    uid: "{{oval_uid}}"
    group: "{{oval_group}}"
    shell: "{{oval_user_shell}}"
    home: "{{oval_homedir}}"

- name: Install ssh pub keys for application account
  authorized_key:
    user: "{{oval_user}}"
    key: '{{lookup("file", item)}}'
  with_items: "{{ssh_keys}}"

- name: Create ENV var file for application account
  template: 
    src: templates/oval_vars.j2
    dest: "{{oval_vars}}"
    mode: 0600
    owner: "{{oval_user}}"
    group: "{{oval_group}}"
  notify:
    - Restart app server

- name: Add ENV var file to .bashrc
  lineinfile:
    dest: "{{oval_homedir}}/.bashrc"
    line: "export $(cat {{oval_vars}} | xargs)"
    state: present 

- name: Create pgpass file
  template:
    src: templates/pgpass.j2 
    dest: "{{oval_homedir}}/.pgpass"
    mode: 0600
    owner: "{{oval_user}}"
    group: "{{oval_group}}"

- name: Install git client
  package: 
    name: git
    update_cache: yes

- name: Pull code from git
  git: 
    repo: "{{git_repo}}"
    dest: "{{app_dir}}"
    version: "{{git_branch}}"
  become: yes
  become_user: "{{oval_user}}"
  notify: 
    - Restart app server
    - Upgrade DB schema

- name: Install virtualenv and python deps
  package: 
    name: "{{item}}"
    update_cache: yes
  with_items: "{{python_app_deps}}"

- name: Add pg_config to alternatives (RHEL)
  alternatives:
    name: pgsql-pg_config
    path: /usr/pgsql-{{postgres_version}}/bin/pg_config
    link: /usr/bin/pg_config 
  when: ansible_os_family == "RedHat"

- name: Upgrade pip version in virtualenv
  pip:
    name: pip
    virtualenv: "{{venv_dir}}"
    version: "{{pip_version}}"
    virtualenv_python: "{{python_version}}"
  become: yes
  become_user: "{{oval_user}}"

- name: Create virtualenv and install pip requirements
  pip:
    requirements: "{{app_dir}}/requirements.txt"
    virtualenv: "{{venv_dir}}"
    virtualenv_python: "{{python_version}}"
  become: yes
  become_user: "{{oval_user}}"
  notify: 
    - Restart app server
    - Upgrade DB schema

- name: Create database migration/upgrade script
  template:
    src: templates/db_upgrade.sh.j2
    dest: "{{oval_homedir}}/db_upgrade.sh"
    owner: oval
    group: oval
    mode: 0755
  notify: 
    - Restart app server
    - Upgrade DB schema

- name: Install Application server binaries
  package:
    name: "{{app_server_packages}}"
    update_cache: yes

- name: Create app server config
  template: 
    src: templates/oval.ini.j2 
    dest: "{{app_server_config}}"
    owner: "{{oval_user}}"
    group: "{{oval_group}}"
  notify: Restart app server

- name: Copy certbot SSL cert for app server
  copy:
    src: "{{lets_encrypt_pub_key}}"
    dest: "{{app_dir}}/server.crt"
    owner: "{{oval_user}}"
    group: "{{oval_group}}"
    mode: 0644
    remote_src: True
    follow: True
  notify: Restart app server

- name: Copy certbot SSL key for app server
  copy:
    src: "{{lets_encrypt_priv_key}}"
    dest: "{{app_dir}}/server.key"
    owner: "{{oval_user}}"
    group: "{{oval_group}}"
    mode: 0400
    remote_src: True
    follow: True
  notify: Restart app server

- name: Add app server prehook for certbot renewal
  blockinfile:
    create: True
    dest: "/etc/letsencrypt/hooks/pre.sh"
    mode: 0755
    marker: "# {mark} ANSIBLE MANAGED BLOCK app server pre hook"
    block: |
      systemctl stop {{app_server}}

- name: Add app server posthook for certbot renewal
  blockinfile:
    create: True
    dest: "/etc/letsencrypt/hooks/post.sh"
    mode: 0755
    marker: "# {mark} ANSIBLE MANAGED BLOCK app server post hook"
    block: |
      cp {{lets_encrypt_priv_key}} {{app_dir}}/server.key
      cp {{lets_encrypt_pub_key}} {{app_dir}}/server.crt
      systemctl start {{app_server}}

- name: Open firewalld for app server 
  firewalld:
    rich_rule: "rule family=\"ipv4\" port port=\"5000\" protocol=\"tcp\" source address=\"{{hostvars[item]['ansible_default_ipv4']['address']}}\" accept"
    state: enabled
    permanent: true
    immediate: true
  with_items: "{{groups['web']}}"

- name: Start/enable app server
  service:
    name: "{{app_server}}"
    state: started
    enabled: yes
